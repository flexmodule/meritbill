<style lang="less">
page {
  height: 100%;
}

.assistance {
  .assistanceTitle {
    font: 40rpx/80rpx '';
    text-align: center;
  }
  .main {
    padding: 36rpx;
    .data {
      .num {
        font: 30rpx/50rpx '';
      }
    }
  }
  .mess {
    padding: 20rpx;
    .messTitle {
      font: 30rpx/60rpx '';
    }
    .messList {
      border: 4rpx dashed #1cd7fe;
      padding: 0 10rpx;
      border-radius: 10rpx;
      background: #eee;
      ::-webkit-scrollbar {
        width: 0;
        height: 0;
        color: transparent;
      }
    }
    .messListBody {
      font: 30rpx/68rpx '';
      padding: 0 5px;
      box-sizing: border-box;
      border-bottom: 1rpx dashed #1cd7fe;
      width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .info {
      text-align: center;
      font: 24rpx/48rpx '';
    }
  }
  .footer {
    position: fixed;
    z-index: 99;
    width: 100%;
    bottom: 0;
    height: 100rpx;
    background: #fff;
    border-top: 1rpx solid #1cd7fe;
    .quickmake {
      width: 398rpx;
      font: 30rpx/68rpx '';
      border-radius: 60rpx;
      margin: 20rpx auto;
      background: #1cd7fe;
      text-align: center;
    }
  }
  .alert {
    position: fixed;
    z-index: 100;
    width: 500rpx;
    left: 0;
    right: 0;
    top: 200rpx;
    padding: 60rpx 30rpx 30rpx;
    margin: auto;
    border: 1rpx solid #eee;
    border-radius: 20rpx;
    background: #fff;
    .closeimg {
      position: absolute;
      right: 20rpx;
      width: 50rpx;
      height: 46rpx;
      top: 20rpx;
      image {
        width: 100%;
        height: 100%;
      }
    }
    .messDetail {
      font: 30rpx/50rpx '';
      height: 200rpx;
      overflow-y: scroll;
      width: 440rpx;
      word-wrap:break-word;
      box-sizing: border-box;
      &::-webkit-scrollbar {
        width: 0;
        height: 0;
        color: transparent;
      }
    }
    .selectWord {
      width: 400rpx;
      height: 80rpx;
      text-align: center;
      font: 30rpx/80rpx "";
      background: #ffdb2f;
      color: #000;
      margin: 0 auto;
      border-radius: 20rpx;
    }
  }
  .canvas-box {
    position: fixed;
    z-index: 99;
    top: 0;
    width: 100%;
    left: 0;
  }
}
</style>
<template>
  <view class="assistance">
    <view class="assistanceTitle">助力脱单主力军分布</view>
    <view class="main">
      <view class="total data">
        <view class="num"><text>你的总助力人数：</text><text>{{totalNum}}</text></view>
        <view class="pro"><progress percent="{{percentNum}}" show-info stroke-width="16" color="#1cd7fe" active="true"/></view>
      </view>
    </view>
    <view class="mess">
      <view class="messTitle">在你脱单的路上，你的匿名好友对你说：(可以点击留言，选择要生成海报的留言)</view>
      <view class="messList">
        <scroll-view scroll-y style="height:{{oHeight}}px" lower-threshold="10px" bindscrolltolower="lower" enable-back-to-top="true">
          <repeat for="{{messListData}}" key="index" index="index" item="item">
            <view class="messListBody" @tap="toDetail({{item.message}})">{{index}}-{{item.message}}</view>
          </repeat>
          <view class="info"><text wx:if="{{loadmore}}">加载中...</text><text wx:if="{{nomore}}">没有更多数据了</text></view>
        </scroll-view>
      </view>
    </view>
    <view class="footer">
      <view class="quickmake" @tap="compose">立即合成脱单战绩海报</view>
    </view>
    <view class="alert" wx:if="{{boxShow}}">
      <view class="closeimg" @tap="closeInfo"><image src="../../img/close.png"/></view>
      <view class="messDetail">{{messDetail}}</view>
      <view class="selectWord" @tap="selectWord">{{selectMess}}</view>
    </view>
    <view class="canvas-box" wx:if="{{isShowCav}}" >
      <canvas canvas-id="combatCanvas" style="width:{{oWidth}}px;height:{{PHeight}}px"></canvas>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import request from '@/utils/request.js';
export default class assistance extends wepy.page {
  data = {
    totalNum: '',
    selectMess: "选择此留言，生成海报",
    percentNum: 100,
    messListData: [],
    oHeight: '',
    loadmore: false,
    nomore: false,
    params: {
      pageNum: 1,
      pageSize: 10,
      end: false
    },
    boxShow: false,
    messDetail: '',
    rpa: '',
    PHeight: '',
    oWidth: '',
    isShowCav: false,
    openid: '',
    words: ""
  };
  components = {};
  methods = {
    selectWord() {
      if(this.selectMess=="选择此留言，生成海报") {
        this.selectMess="已经选择";
        this.words=this.messDetail;
      }
    },
    compose() {
      var that = this;
      that.isShowCav = true;
      var options = {
      "width": 260,
      "path": `pages/auth/index?openid=${that.openid}`,
      "is_hyaline": true
    };
    request(
      '/qrcode/qrcodeindex',
      'post',
      options,
      '请求中',
      function(res) {
        if (res.meta.success) {
          var resPath = '../../img/zhanji.png';
      //绘制canvas背景图
      var rpx = that.rpa;
      const ctx = wx.createCanvasContext('combatCanvas');
      ctx.drawImage(resPath, 0, 0, that.oWidth, that.PHeight);
      //绘制文字
      ctx.setTextAlign('left');
      ctx.setFontSize(15 * rpx);
      ctx.fillStyle = '#2a358b';
      ctx.fillText(`为你点赞人数：${that.totalNum}人`, 30 * rpx, 80 * rpx);
      //绘制进度条
      ctx.fillStyle = '#884ce4'; //对画布填充颜色
      ctx.fillRect(40 * rpx, 90 * rpx, 200 * rpx, 24 * rpx); //fillRect() 方法绘制“已填色”的矩形。默认的填充颜色是黑色。
      ctx.fillStyle = '#2a358b';
      ctx.fillText(`100%`, 270 * rpx, 110 * rpx);
      //绘制留言
      ctx.fillStyle = '#000'; //对画布填充颜色
      ctx.fillText(`你的好友留言：`,30 * rpx, 350 * rpx);
       ctx.fillStyle = '#2a358b';
      //留言换行
    var text = that.words;
    var chr =text.split("");//这个方法是将一个字符串分割成字符串数组
    var temp = "";
    var row = [];
    for (var a = 0; a < chr.length; a++) {
      if (ctx.measureText(temp).width < 250) {
        temp += chr[a];
      }
      else {
        a--; //这里添加了a-- 是为了防止字符丢失，效果图中有对比
        row.push(temp);
        temp = "";
      }
    }
    row.push(temp); 

    //如果数组长度大于2 则截取前两个
    if (row.length > 2) {
      var rowCut = row.slice(0, 2);
      var rowPart = rowCut[1];
      var test = "";
      var empty = [];
      for (var a = 0; a < rowPart.length; a++) {
        if (ctx.measureText(test).width < that.oWidth-30) {
          test += rowPart[a];
        }
        else {
          break;
        }
      }
      empty.push(test);
      var group = empty[0] + "..."//这里只显示两行，超出的用...表示
      rowCut.splice(1, 1, group);
      row = rowCut;
    }
    for (var b = 0; b < row.length; b++) {
      ctx.fillText(row[b], 30*rpx  , 380 *rpx+ b* 20*rpx);
    }
    
      //绘制二维码
      ctx.save();
      ctx.drawImage(res.data.imgurl, 100 * rpx, 410 * rpx, 140 * rpx, 140 * rpx);
      ctx.restore();
      ctx.setTextAlign('left');
      ctx.setFontSize(15 * rpx);
      ctx.fillStyle = '#000'; 
      ctx.fillText(`欢迎扫码一起玩脱单心里话`, 80 * rpx, 570 * rpx);
      ctx.fillText(`对你的好友说悄悄话`, 100 * rpx, 590 * rpx);
      ctx.draw();
      setTimeout(function() {
        wx.canvasToTempFilePath({
          canvasId: 'combatCanvas',
          fileType: 'jpg',
          success: function(res) {
            console.log(res);
            wx.saveImageToPhotosAlbum({
              filePath: res.tempFilePath,
              success(res) {
                console.log(res);
                wx.hideLoading();
                wx.showToast({
                  title: '保存成功'
                });
              },
              fail(err) {
                console.log(err);
                wx.hideLoading();
              }
            });
          },
          fail: function(err) {
            console.log(err);
          }
        });
      }, 500);
        }else {
          wx.showToast({
            title: '系统错误'
          });
        }
      },
      function(err) {
        wx.showToast({
          title: '系统错误'+err
        });
      }
    );
      
    },
    toDetail(mess) {
      this.messDetail = mess;
      this.boxShow = true;
    },
    closeInfo() {
      this.boxShow = false;
    }
  };
  
  getNumDetail(openid) {
    var that = this;
    request(
      '/userhelp/getnum',
      'post',
      { openid: openid },
      '请求中',
      function(res) {
        console.log(res);
        if (res.meta.success) {
          that.totalNum = res.data.result.totalNum;
          that.$apply();
        } else {
          wx.showToast({
            title: '获取数据失败',
            icon: 'none',
            duration: 500
          });
        }
      },
      function(err) {
        console.log(err);
      }
    );
  }
  lower(e) {
    var that = this;
    console.log(e);
    if (!this.params.end) {
      that.loadmore = true;
      that.getMessList(this.openid);
    }
  }
  getMessList(openid) {
    var that = this;
    request(
      `/userhelp/gethelpdata?page=${that.params.pageNum}&pagesize=${that.params.pageSize}`,
      'post',
      { openid: openid },
      '请求中',
      function(res) {
        console.log(res);
        if (res.meta.success) {
          let messlist = res.data.result;
          if(res.data.result.length==0) {
            that.words="你的好友暂未给你留言,塾小乐给你留言了,祝你心想事成,早日找到心仪对象";
          } 
          messlist.forEach((order, i) => {
            that.messListData.push(order);
          });
          that.loadmore = false;
          if (messlist.length < that.params.pageSize) {
            that.nomore = true;
            that.loadmore = false;
            that.params.end = true;
          } else {
            that.params.pageNum++;
          }
        } else {
          wx.showToast({
            title: '获取数据失败',
            icon: 'none',
            duration: 500
          });
        }
        that.$apply();
      },
      function(err) {
        console.log(err);
      }
    );
  }
  events = {};
  onLoad() {
    var that = this;
    wx.showShareMenu();
    if (wx.getStorageSync('openid')) {
      that.openid = wx.getStorageSync('openid');
      that.getMessList(that.openid);
      that.getNumDetail(that.openid);
    } else {
      that.$parent.getAuthKey().then(resOpenid => {
        that.openid =resOpenid;
        that.getMessList(resOpenid);
        that.getNumDetail(resOpenid);
      });
    }
    try {
      var res = wx.getSystemInfoSync();
      this.PHeight = res.windowHeight;
      this.oHeight = res.windowHeight - 330;
      this.oWidth = res.windowWidth;
      this.rpa = res.windowWidth / 375;
    } catch (e) {
      // Do something when catch error
    }
    this.$apply();
  }
}
</script>
